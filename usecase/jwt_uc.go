package usecase

import (
	"time"

	"github.com/golang-jwt/jwt/v5"
)

var jwtKey = []byte("my_secret_key") // ðŸ”‘ Ø¯Ø± Ø¹Ù…Ù„ Ø¨Ø§ÛŒØ¯ Ø¯Ø± env Ù†Ú¯Ù‡ Ø¯Ø§Ø±ÛŒ Ø¨Ø´Ù‡

type Claims struct {
	Username string `json:"username"`
	jwt.RegisteredClaims
}

// ØªÙˆÙ„ÛŒØ¯ ØªÙˆÚ©Ù†
func GenerateToken(username string) (string, error) {
	expirationTime := time.Now().Add(24 * time.Hour) // Û± Ø±ÙˆØ² Ø§Ø¹ØªØ¨Ø§Ø±
	claims := &Claims{
		Username: username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(jwtKey)
}

// Ø¨Ø±Ø±Ø³ÛŒ ØªÙˆÚ©Ù†
func ValidateToken(tokenStr string) (*Claims, error) {
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenStr, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})
	if err != nil || !token.Valid {
		return nil, err
	}
	return claims, nil
}
