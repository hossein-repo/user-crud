basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  main.HealthResponse:
    properties:
      database:
        example: car_sale_db
        type: string
      message:
        example: Server is running
        type: string
      status:
        example: OK
        type: string
    type: object
  main.LoginRequest:
    properties:
      password:
        example: Secret123!
        minLength: 8
        type: string
      username:
        example: johndoe
        maxLength: 20
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  main.RegisterRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      firstName:
        example: John
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      mobileNumber:
        example: "09123456789"
        type: string
      password:
        example: Secret123!
        minLength: 8
        type: string
      username:
        example: johndoe
        maxLength: 20
        minLength: 5
        type: string
    required:
    - email
    - firstName
    - lastName
    - mobileNumber
    - password
    - username
    type: object
  model.Role:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      userRoles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      enabled:
        type: boolean
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      mobileNumber:
        type: string
      password:
        description: افزایش طول برای hash
        type: string
      updatedAt:
        type: string
      userRoles:
        items:
          $ref: '#/definitions/model.UserRole'
        type: array
      username:
        type: string
    type: object
  model.UserRole:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      role:
        $ref: '#/definitions/model.Role'
      roleId:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userId:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: A complete user management system with authentication and validation
  title: User Management API
  version: "1.0"
paths:
  /health:
    get:
      description: Check if server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthResponse'
      summary: Health check
      tags:
      - system
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with validation
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - users
  /users:
    get:
      description: Retrieve list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieve a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
